1.Команды, позволяющие git'у узнать Ваше имя и эл.почту (выполняются один раз в начале работы с git'ом)
***
git config --global user.name "Your Name"
git config --global user.email "Your_email@whatever.com"
***

2.Клонирование необходимого нам репозитория (сначала перейдите в директорию ~/gitdir/)
***
git clone https://github.com/cppspec/cpp-src.git
***

3.Скачивание текущей версии репозитория:
***
git pull
***

4.Текущий статус (информация о текущих изменениях)
***
git status
***

5.История изменений
***
git log
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short #просто выполните эту команду и посмотрите насколько удобнее смотреть историю в таком формате
***
6.Индексация изменений. Индексация изменени в файле file - уведомления git'aо том, что в файле file произошли изменения.
***
git add file #индексация изменения в файле file
git add file1 file 2 #индексация изменений в файлах file1 и file2
git add --all #индексация всех изменений, сделанных Вами в текущей сессии

7.Коммит изменений. Коммит изменения - команда git'у сохранить данное изменение.
***
git commit #коммит всех проиндексированных изменений
git commit -a #коммит всех проиндексированных изменений.
git commit -m "some commit"  #флаг -m позволяет писать текст коммита в ковычках в командной строке
***

8.Отмена индексации - отмена команды git add 
***
git reset HEAD <файл(ы), проиндексированные изменения в которых Вы хотите отменить>
***

9.Отмена коммита 
Допустим в файле file Вы сделали какие-то изменения, проиндексировали их и сделали такой коммит:
git commit -m "коммит изменений".
Вы хотите отменить этот коммит, для этого надо выполнить
***
git revert HEAD #откроется текстовый редактор. Команда git revert HEAD генерирует коммит, который удаляет коммит, на который указывает HEAD (что такое HEAD-см.ниже). HEAD указывает на последний сделанный коммит, если Вы не выполняли каких-либо команд, изменяющих положение HEAD. В текстовом редакторе надо написать сообщение для этого отменяющего коммита.
git revere HEAD --no-edit #в этом случае текстовый редактор не откроется, а сообщение для отменяющего коммита будет "Revert "нежелательный коммит" ".
***

10.Откат к какому-либо предыдущему коммиту
В выводе команды git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short первые 7 символов -  первые 7 символов хэшей соответствующих коммитов.
Чтобы переключиться на состояние репозитория с коммитом, у которого первые 7 символов хэша abcdefg, выполните команду
***
git checkout abcdefg
#выполните еше раз команду просмотра истории, указанную выше, и такую же команду, но добавив еще флаг --all. В первом случае будет выведена история коммитов до того коммита, к которому Вы откатились, включая его, во втором случае будет выведена история всех сделанных коммитов, вне зависимости от того, к какому коммиту Вы откатились. 
***

11.Удаление коммитов (сброс коммитов). Допустим мы сделали несколько коммитов, которые чем-то плохи и их нужно удалить из истории и откатиться к версии проекта, которая была до первого плохого коммита. Тогда надо найти коммит, к которому надо сброситься, взять первые 7 символов из его хэша и выполнить
***
git reset --hard <первые 7 символов из того коммита, о котором написано на 2 строки выше>
#после выполнения этой команды в истории даже с флагом --all не будут отображаться коммиты, который сделаны позднее того, к которому Вы сбросились.
***

12.Создание новой ветки
***
git checkout -b <название новой ветки> #при этом Вы сразу переключитесь на созданную ветку
***
13.Просмотр всех веток
***
git branch #при этом ветка, на которой Вы находитесь в данный момент будет помечена символом *
***

14.Переключение на новую ветку
***
git checkout <название ветки>
#при этом учтите, что переключиться на другую ветку возможно только тогда, когда на текущей ветке все текущие изменения проиндексированы
#и закоммичены
***

15.
